from aiogram import Router, F
import bot_db as db
from redis_storage import redis
from aiogram.methods.send_message import SendMessage
from aiogram.methods.delete_message import DeleteMessage
from bot_db import get_user, get_class_meetings, get_class
import datetime
import useless
import config
import keyboards


router = Router()

router.message.filter(F.text.in_(['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–π üóì', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ üóÇ',
                                  '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üë§', '–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É üõ†', '–°–≤—è–∑—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º üë©üèª‚Äçüè´']))

@router.message(F.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–π üóì')
async def checkMeetingsText(message):
    data = await redis.get(name=message.chat.id)
    if data:
        user_data = await get_user(message.chat.id)
        class_id = user_data[6]
        if class_id and class_id != 0 and user_data[7] == 1:
            text = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–π:\n"
            meetings_data = list(await get_class_meetings(class_id))
            if not meetings_data:
                text += "<b>–õ–µ–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</b>"
            else:
                meetings_data = sorted(meetings_data, key=lambda data: datetime.datetime.fromisoformat(data[2]))
                i = 0
                for meeting_data in meetings_data:
                    i += 1
                    text += f"{i}. {useless.dateToStr(datetime.datetime.fromisoformat(meeting_data[2]))}\n"
            await message.answer(text)
                
        else:
            await message.answer("–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É.")
    else:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    
@router.message(F.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ üóÇ')
async def checkPaymentText(message):
    data = await redis.get(name=message.chat.id)
    if data:
        user_data = await get_user(message.chat.id)
        class_id = user_data[6]
        if class_id and class_id != 0 and user_data[7] == 1:
            class_data = await get_class(class_id)
            start_date = datetime.datetime.fromisoformat(class_data[2])
            if not user_data[8] == 'using':
                months = user_data[5]
                date1 = ' '.join(useless.dateToStr(start_date).split()[1:])
                tarif = useless.tarifName(user_data[4])
                if not months == config.maximum_months:
                    exp_date = start_date + datetime.timedelta(days=30*months)
                    date2 = ' '.join(useless.dateToStr(exp_date).split()[1:])
                    text = (f"–¢–∞—Ä–∏—Ñ: ¬´{tarif}¬ª\n"
                            f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è: {date1}.\n"
                            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π: {months*30}/{config.maximum_months*30}.\n"
                            f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è: {date2}.")
                else:
                    exp_date = datetime.datetime.fromisoformat(class_data[3])
                    date2 = ' '.join(useless.dateToStr(exp_date).split()[1:])
                    text = (f"–¢–∞—Ä–∏—Ñ: ¬´{tarif}¬ª\n"
                            f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è: {date1}.\n"
                            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π: {months*30}/{config.maximum_months*30}.\n"
                            f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è: {date2} (—Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –∫—É—Ä—Å–∞).")
            else:
                exp_date = start_date + datetime.timedelta(days=7)
                text = (f"–í—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º, –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è {useless.dateToStr(exp_date)}.")
            await message.answer(text)
        else:
            await message.answer("–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É.")
    else:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

@router.message(F.text == '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üë§')
async def checkInfoText(message, state):
    data = await redis.get(name=message.chat.id)
    if data:
        user_data = await state.get_data()
        if 'name' in user_data and 'changemsg' in user_data:
            await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –≤—ã–∑–≤–∞–Ω–Ω–æ–µ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑.")
        elif 'name' in user_data:
            await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        else:
            if not 'changemsg' in user_data:
                user_data = await get_user(message.chat.id)
                await state.update_data(name=user_data[1], phone=user_data[2], email=user_data[3])
                user_data = dict(zip(['name', 'phone', 'email'], [user_data[1], user_data[2], user_data[3]]))
            else:
                if user_data['changemsg']:
                    await DeleteMessage(chat_id=message.chat.id, message_id=user_data['changemsg'])
            msg = await SendMessage(text=f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–§–ò–û: {user_data['name']}.\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['phone']}.\n"
                                        f"E-mail: {user_data['email']}.", chat_id=message.chat.id,
                                        reply_markup=keyboards.change_info())
            await state.update_data(changemsg=msg.message_id)
    else:
        await message.answer('–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')

@router.message(F.text == '–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É üõ†')
async def helpText(message):
    await message.answer(text='–ü–æ –ø–æ–≤–æ–¥—É –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É üíû', reply_markup=keyboards.help_msg())

@router.message(F.text == '–°–≤—è–∑—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º üë©üèª‚Äçüè´')
async def teacherText(message):
    data = await redis.get(name=message.chat.id)
    if data:
        user_data = await db.get_user(message.chat.id)
        access = user_data[7]
        tarif = user_data[4]
        if access == 1:
            if tarif == '2':
                await message.answer(text='–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ ‚¨áÔ∏è', reply_markup=keyboards.teacher())
            else:
                await message.answer(text='–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–∞—Ä–∏—Ñ–µ ¬´–•–æ—á—É –±–æ–ª—å—à–µ–≥–æ¬ª.\n'
                                     '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ç–∞—Ä–∏—Ñ ¬´–•–æ—á—É –±–æ–ª—å—à–µ–≥–æ¬ª, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º ‚¨áÔ∏è',
                                     reply_markup=keyboards.help_msg())
        else:
            await message.answer("–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É.")
    else:
        await message.answer('–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')
